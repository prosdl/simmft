<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
   xmlns:context="http://www.springframework.org/schema/context"
   xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:sec="http://www.springframework.org/schema/security"
   xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
   xsi:schemaLocation="
      http://www.springframework.org/schema/security/oauth2
      http://www.springframework.org/schema/security/spring-security-oauth2.xsd
      http://www.springframework.org/schema/beans 
      http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
      http://www.springframework.org/schema/tx 
      http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
      http://www.springframework.org/schema/context 
      http://www.springframework.org/schema/context/spring-context-4.0.xsd        
      http://www.springframework.org/schema/jdbc 
      http://www.springframework.org/schema/jdbc/spring-s-4.0.xsd
      http://www.springframework.org/schema/security 
      http://www.springframework.org/schema/security/spring-security-3.2.xsd">

   <context:component-scan base-package="de.simmft"></context:component-scan>
   <import resource="classpath:spring-simmft-model.xml" />

   <oauth:authorization-server
      client-details-service-ref="clientDetails" token-services-ref="tokenServices">
      <oauth:client-credentials />
   </oauth:authorization-server>

   <sec:authentication-manager alias="clientAuthenticationManager">
      <sec:authentication-provider
         user-service-ref="clientDetailsUserService">
         <sec:password-encoder hash="sha-256"
            base64="true"></sec:password-encoder>
      </sec:authentication-provider>
   </sec:authentication-manager>

   <http pattern="/oauth/token" create-session="stateless"
      authentication-manager-ref="clientAuthenticationManager"
      xmlns="http://www.springframework.org/schema/security">
      <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
      <anonymous enabled="false" />
      <http-basic entry-point-ref="clientAuthenticationEntryPoint" />

      <!-- include this only if you need to authenticate clients via request 
         parameters -->
      <custom-filter ref="clientCredentialsTokenEndpointFilter"
         before="BASIC_AUTH_FILTER" />
      <access-denied-handler ref="oauthAccessDeniedHandler" />
   </http>

   <oauth:resource-server id="resourceServerFilter"
      resource-id="rest_server" token-services-ref="tokenServices" />

   <bean id="clientDetails" class="de.simmft.rest.resources.MftClientDetailsService">
   </bean>

   <bean id="clientDetailsUserService"
      class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
      <constructor-arg ref="clientDetails" />
   </bean>


   <http pattern="/**" create-session="never"
      entry-point-ref="oauthAuthenticationEntryPoint"
      access-decision-manager-ref="accessDecisionManager"
      xmlns="http://www.springframework.org/schema/security">
      <anonymous enabled="false" />

      <intercept-url pattern="/rest/**" />
      <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
      <access-denied-handler ref="oauthAccessDeniedHandler" />
   </http>

   <bean id="tokenStore"
      class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

   <bean id="tokenServices"
      class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
      <property name="tokenStore" ref="tokenStore" />
      <property name="supportRefreshToken" value="false" />
      <property name="clientDetailsService" ref="clientDetails" />
      <property name="accessTokenValiditySeconds" value="400000" />
      <property name="refreshTokenValiditySeconds" value="0" />
   </bean>

   <bean id="accessDecisionManager"
      class="org.springframework.security.access.vote.UnanimousBased"
      xmlns="http://www.springframework.org/schema/beans">
      <constructor-arg>
         <list>
            <bean
               class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
            <bean class="org.springframework.security.access.vote.RoleVoter" />
            <bean
               class="org.springframework.security.access.vote.AuthenticatedVoter" />
         </list>
      </constructor-arg>
   </bean>


   <bean id="oauthAuthenticationEntryPoint"
      class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
      <property name="realmName" value="theRealm" />
   </bean>

   <bean id="clientAuthenticationEntryPoint"
      class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
      <property name="realmName" value="theRealm/client" />
      <property name="typeName" value="Basic" />
   </bean>

   <bean id="clientCredentialsTokenEndpointFilter"
      class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
      <property name="authenticationManager" ref="clientAuthenticationManager" />
   </bean>



   <bean id="oauthAccessDeniedHandler"
      class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />


   <sec:global-method-security
      pre-post-annotations="enabled" proxy-target-class="true">
      <sec:expression-handler ref="oauthExpressionHandler" />
   </sec:global-method-security>

   <oauth:expression-handler id="oauthExpressionHandler" />

   <oauth:web-expression-handler id="oauthWebExpressionHandler" />
</beans>